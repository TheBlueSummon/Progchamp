[
    {
        "id": 336157818,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMzYxNTc4MTg=",
        "name": "c-basic-programs",
        "full_name": "sanusanth/c-basic-programs",
        "private": false,
        "owner": {
            "login": "sanusanth",
            "id": 66163152,
            "node_id": "MDQ6VXNlcjY2MTYzMTUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/66163152?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sanusanth",
            "html_url": "https://github.com/sanusanth",
            "followers_url": "https://api.github.com/users/sanusanth/followers",
            "following_url": "https://api.github.com/users/sanusanth/following{/other_user}",
            "gists_url": "https://api.github.com/users/sanusanth/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sanusanth/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sanusanth/subscriptions",
            "organizations_url": "https://api.github.com/users/sanusanth/orgs",
            "repos_url": "https://api.github.com/users/sanusanth/repos",
            "events_url": "https://api.github.com/users/sanusanth/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sanusanth/received_events",
            "type": "User",
            "site_admin": false
        },
        "html_url": "https://github.com/sanusanth/c-basic-programs",
        "description": "What is C#? C# is pronounced \"C-Sharp\".  It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.  C# has roots from the C family, and the language is close to other popular languages like C++ and Java.  The first version was released in year 2002. The latest version, C# 8, was released in September 2019.  C# is a modern object-oriented programming language developed in 2000 by Anders Hejlsberg, the principal designer and lead architect at Microsoft. It is pronounced as \"C-Sharp,\" inspired by the musical notation \u201c\u266f\u201d which stands for a note with a slightly higher pitch. As it\u2019s considered an incremental compilation of the C++ language, the name C \u201csharp\u201d seemed most appropriate. The sharp symbol, however, has been replaced by the keyboard friendly \u201c#\u201d as a suffix to \u201cC\u201d for purposes of programming.  Although the code is very similar to C++, C# is newer and has grown fast with extensive support from Microsoft. The fact that it\u2019s so similar to Java syntactically helps explain why it has emerged as one of the most popular programming languages today.   C# is pronounced \"C-Sharp\".  It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.  C# has roots from the C family, and the language is close to other popular languages like C++ and Java.  The first version was released in year 2002. The latest version, C# 8, was released in September 2019.  C# is used for:  Mobile applications Desktop applications Web applications Web services Web sites Games VR Database applications And much, much more!  An Introduction to C# Programming  C# is a general-purpose, object-oriented programming language that is structured and easy to learn. It runs on Microsoft\u2019s .Net Framework and can be compiled on a variety of computer platforms. As the syntax is simple and easy to learn, developers familiar with C, C++, or Java have found a comfort zone within C#.  C# is a boon for developers who want to build a wide range of applications on the .NET Framework\u2014Windows applications, Web applications, and Web services\u2014in addition to building mobile apps, Windows Store apps, and enterprise software. It is thus considered a powerful programming language and features in every developer\u2019s cache of tools.  Although first released in 2002, when it was introduced with .NET Framework 1.0, the C# language has evolved a great deal since then. The most recent version is C# 8.0, available in preview as part of Visual Studio. To get access to all of the new language features, you would need to install the latest preview version of .NET Core 3.0.   C# is used for:  Mobile applications Desktop applications Web applications Web services Web sites Games VR Database applications And much, much more!  Why Use C#?  It is one of the most popular programming language in the world It is easy to learn and simple to use It has a huge community support C# is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs. As C# is close to C, C++ and Java, it makes it easy for programmers to switch to C# or vice versa.   The C# Environment  You need the .NET Framework and an IDE (integrated development environment) to work with the C# language.  The .NET Framework  The .NET Framework platform of the Windows OS is required to write web and desktop-based applications using not only C# but also Visual Basic and Jscript, as the platform provides language interoperability. Besides, the .Net Framework allows C# to communicate with any of the other common languages, such as C++, Jscript, COBOL, and so on.   IDEs  Microsoft provides various IDEs for C# programming:  Visual Studio 2010 (VS) Visual Studio Express Visual Web Developer Visual Studio Code (VSC)  The C# source code files can be written using a basic text editor, like Notepad, and compiled using the command-line compiler of the .NET Framework.   Alternative open-source versions of the .Net Framework can work on other operating systems as well. For instance, the Mono has a C# compiler and runs on several operating systems, including Linux, Mac, Android, BSD, iOS, Windows, Solaris, and UNIX. This brings enhanced development tools to the developer.   As C# is part of the .Net Framework platform, it has access to its enormous library of codes and components, such as Common Language Runtime (CLR), the .Net Framework Class Library, Common Language Specification, Common Type System, Metadata and Assemblies, Windows Forms, ASP.Net and ASP.Net AJAX, Windows Workflow Foundation (WF), Windows Communication Foundation (WCF), and LINQ.   C# and Java  C# and Java are high-level programming languages that share several similarities (as well as many differences). They are both object-oriented languages much influenced by C++. But while C# is suitable for application development in the Microsoft ecosystem from the front, Java is considered best for client-side web applications. Also, while C# has many tools for programming, Java has a larger arsenal of tools to choose from in IDEs and Text Editors.   C# is used for virtual reality projects like games, mobile, and web applications. It is built specifically for Microsoft platforms and several non-Microsoft-based operating systems, like the Mono Project that works with Linux and OS X.  Java is used for creating messaging applications and developing web-based and enterprise-based applications in open-source ecosystems.  Both C# and Java support arrays. However, each language uses them differently. In C#, arrays are a specialization of the system; in Java, they are a direct specialization of the object.   The C# programming language executes on the CLR. The source code is interpreted into bytecode, which is further compiled by the CLR. Java runs on any platform with the assistance of JRE (Java Runtime Environment). The written source code is first compiled into bytecode and then converted into machine code to be executed on a JRE.   C# and C++   Although C# and C++ are both C-based languages with similar code, there are some differences. For one, C# is considered a component-oriented programming language, while C++ is a partial object-oriented language. Also, while both languages are compiled languages, C# compiles to CLR and is interpreted by.NET, but C++ compiles to machine code. The size of binaries in C# is much larger than in C++.  Other differences between the two include the following:  C# gives compiler errors and warnings, but C++ doesn\u2019t support warnings, which may cause damage to the OS. C# runs in a virtual machine for automatic memory management. C++ requires you to manage memory manually. C# can create Windows, .NET, web, desktop, and mobile applications, but not stand-alone apps. C++ can create server-side, stand-alone, and console applications as it can work directly with the hardware. C++ can be used on any platform, while C# is targeted toward Windows OS. Generally, C++ being faster than C#, the former is preferred for applications where performance is essential.    Features of C#  The C# programming language has many features that make it more useful and unique when compared to other languages, including:   Object-oriented language Being object-oriented, C# allows the creation of modular applications and reusable codes, an advantage over C++. As an object-oriented language, C# makes development and maintenance easier when project size grows. It supports all three object-oriented features: data encapsulation, inheritance, interfaces, and polymorphism.  Simplicity C# is a simple language with a structured approach to problem-solving. Unsafe operations, like direct memory manipulation, are not allowed.  Speed The compilation and execution time in C# is very powerful and fast.   A Modern programming language C# programming is used for building scalable and interoperable applications with support for modern features like automatic garbage collection, error handling, debugging, and robust security. It has built-in support for a web service to be invoked from any app running on any platform.  Type-safe Arrays and objects are zero base indexed and bound checked. There is an automatic checking of the overflow of types. The C# type safety instances support robust programming.  Interoperability Language interoperability of C# maximizes code reuse for the efficiency of the development process. C# programs can work upon almost anything as a program can call out any native API.  Consistency Its unified type system enables developers to extend the type system simply and easily for consistent behavior.  Updateable C# is automatically updateable. Its versioning support enables complex frameworks to be developed and evolved.  Component oriented C# supports component-oriented programming through the concepts of properties, methods, events, and attributes for self-contained and self-describing components of functionality for robust and scalable applications.  Structured Programming Language The structured design and modularization in C# break a problem into parts, using functions for easy implementation to solve significant problems.  Rich Library C# has a standard library with many inbuilt functions for easy and fast development.   Prerequisites for Learning C#   Basic knowledge of C or C++ or any programming language or programming fundamentals.   Additionally, the OOP concept makes for a short learning curve of C#.   Advantages of C#   There are many advantages to the C# language that makes it a useful programming language compared to other languages like Java, C, or C++. These include:  Being an object-oriented language, C# allows you to create modular, maintainable applications and reusable codes  Familiar syntax  Easy to develop as it has a rich class of libraries for smooth implementation of functions   Enhanced integration as an application written in .NET will integrate and interpret better when compared to other NET technologies   As C# runs on CLR, it makes it easy to integrate with components written in other languages  It\u2019s safe, with no data loss as there is no type-conversion so that you can write secure codes  The automatic garbage collection keeps the system clean and doesn\u2019t hang it during execution  As your machine has to install the .NET Framework to run C#, it supports cross-platform  Strong memory backup prevents memory leakage   Programming support of the Microsoft ecosystem makes development easy and seamless  Low maintenance cost, as C# can develop iOS, Android, and Windows Phone native apps  The syntax is similar to C, C++, and Java, which makes it easier to learn and work with C#  Useful as it can develop iOS, Android, and Windows Phone native apps with the Xamarin Framework  C# is the most powerful programming language for the .NET Framework  Fast development as C# is open source steered by Microsoft with access to open source projects and tools on Github, and many active communities contributing to the improvement  What Can C Sharp Do for You?  C# can be used to develop a wide range of:  Windows client applications Windows libraries and components Windows services Web applications Native iOS and Android mobile apps Azure cloud applications and services Gaming consoles and gaming systems Video and virtual reality games Interoperability software like SharePoint Enterprise software Backend services and database programs AI and ML applications Distributed applications Hardware-level programming Virus and malware software GUI-based applications IoT devices Blockchain and distributed ledger technology   C# Programming for Beginners: Introduction, Features and Applications By Simplilearn Last updated on Jan 20, 2020674 C# Programming for Beginners As a programmer, you\u2019re motivated to master the most popular languages that will give you an edge in your career. There\u2019s a vast number of programming languages that you can learn, but how do you know which is the most useful? If you know C and C++, do you need to learn C# as well? How similar is C# to Java? Does it become more comfortable for you to learn C# if you already know Java?   Every developer and wannabe programmer asks these types of questions.   So let us explore C# programming: how it evolved as an extension of C and why you need to learn it as a part of the Master\u2019s Program in integrated DevOps for server-side execution.  Are you a web developer or someone interested to build a website? Enroll for the Javascript Certification Training. Check out the course preview now! What is C#? C# is a modern object-oriented programming language developed in 2000 by Anders Hejlsberg, the principal designer and lead architect at Microsoft. It is pronounced as \"C-Sharp,\" inspired by the musical notation \u201c\u266f\u201d which stands for a note with a slightly higher pitch. As it\u2019s considered an incremental compilation of the C++ language, the name C \u201csharp\u201d seemed most appropriate. The sharp symbol, however, has been replaced by the keyboard friendly \u201c#\u201d as a suffix to \u201cC\u201d for purposes of programming.  Although the code is very similar to C++, C# is newer and has grown fast with extensive support from Microsoft. The fact that it\u2019s so similar to Java syntactically helps explain why it has emerged as one of the most popular programming languages today.   An Introduction to C# Programming C# is a general-purpose, object-oriented programming language that is structured and easy to learn. It runs on Microsoft\u2019s .Net Framework and can be compiled on a variety of computer platforms. As the syntax is simple and easy to learn, developers familiar with C, C++, or Java have found a comfort zone within C#.  C# is a boon for developers who want to build a wide range of applications on the .NET Framework\u2014Windows applications, Web applications, and Web services\u2014in addition to building mobile apps, Windows Store apps, and enterprise software. It is thus considered a powerful programming language and features in every developer\u2019s cache of tools.  Although first released in 2002, when it was introduced with .NET Framework 1.0, the C# language has evolved a great deal since then. The most recent version is C# 8.0, available in preview as part of Visual Studio. To get access to all of the new language features, you would need to install the latest preview version of .NET Core 3.0.   The C# Environment  You need the .NET Framework and an IDE (integrated development environment) to work with the C# language.  The .NET Framework  The .NET Framework platform of the Windows OS is required to write web and desktop-based applications using not only C# but also Visual Basic and Jscript, as the platform provides language interoperability. Besides, the .Net Framework allows C# to communicate with any of the other common languages, such as C++, Jscript, COBOL, and so on.   IDEs  Microsoft provides various IDEs for C# programming:  Visual Studio 2010 (VS) Visual Studio Express Visual Web Developer Visual Studio Code (VSC) The C# source code files can be written using a basic text editor, like Notepad, and compiled using the command-line compiler of the .NET Framework.   Alternative open-source versions of the .Net Framework can work on other operating systems as well. For instance, the Mono has a C# compiler and runs on several operating systems, including Linux, Mac, Android, BSD, iOS, Windows, Solaris, and UNIX. This brings enhanced development tools to the developer.   As C# is part of the .Net Framework platform, it has access to its enormous library of codes and components, such as Common Language Runtime (CLR), the .Net Framework Class Library, Common Language Specification, Common Type System, Metadata and Assemblies, Windows Forms, ASP.Net and ASP.Net AJAX, Windows Workflow Foundation (WF), Windows Communication Foundation (WCF), and LINQ.  C# and Java  C# and Java are high-level programming languages that share several similarities (as well as many differences). They are both object-oriented languages much influenced by C++. But while C# is suitable for application development in the Microsoft ecosystem from the front, Java is considered best for client-side web applications. Also, while C# has many tools for programming, Java has a larger arsenal of tools to choose from in IDEs and Text Editors.   C# is used for virtual reality projects like games, mobile, and web applications. It is built specifically for Microsoft platforms and several non-Microsoft-based operating systems, like the Mono Project that works with Linux and OS X.  Java is used for creating messaging applications and developing web-based and enterprise-based applications in open-source ecosystems.  Both C# and Java support arrays. However, each language uses them differently. In C#, arrays are a specialization of the system; in Java, they are a direct specialization of the object.   The C# programming language executes on the CLR. The source code is interpreted into bytecode, which is further compiled by the CLR. Java runs on any platform with the assistance of JRE (Java Runtime Environment). The written source code is first compiled into bytecode and then converted into machine code to be executed on a JRE.  C# and C++   Although C# and C++ are both C-based languages with similar code, there are some differences. For one, C# is considered a component-oriented programming language, while C++ is a partial object-oriented language. Also, while both languages are compiled languages, C# compiles to CLR and is interpreted by.NET, but C++ compiles to machine code. The size of binaries in C# is much larger than in C++.  Other differences between the two include the following:  C# gives compiler errors and warnings, but C++ doesn\u2019t support warnings, which may cause damage to the OS. C# runs in a virtual machine for automatic memory management. C++ requires you to manage memory manually. C# can create Windows, .NET, web, desktop, and mobile applications, but not stand-alone apps. C++ can create server-side, stand-alone, and console applications as it can work directly with the hardware. C++ can be used on any platform, while C# is targeted toward Windows OS. Generally, C++ being faster than C#, the former is preferred for applications where performance is essential.  Features of C# The C# programming language has many features that make it more useful and unique when compared to other languages, including:  Object-oriented language Being object-oriented, C# allows the creation of modular applications and reusable codes, an advantage over C++. As an object-oriented language, C# makes development and maintenance easier when project size grows. It supports all three object-oriented features: data encapsulation, inheritance, interfaces, and polymorphism.  Simplicity C# is a simple language with a structured approach to problem-solving. Unsafe operations, like direct memory manipulation, are not allowed.  Speed The compilation and execution time in C# is very powerful and fast.   A Modern programming language C# programming is used for building scalable and interoperable applications with support for modern features like automatic garbage collection, error handling, debugging, and robust security. It has built-in support for a web service to be invoked from any app running on any platform.  Type-safe Arrays and objects are zero base indexed and bound checked. There is an automatic checking of the overflow of types. The C# type safety instances support robust programming.  Interoperability Language interoperability of C# maximizes code reuse for the efficiency of the development process. C# programs can work upon almost anything as a program can call out any native API.  Consistency Its unified type system enables developers to extend the type system simply and easily for consistent behavior.  Updateable C# is automatically updateable. Its versioning support enables complex frameworks to be developed and evolved.  Component oriented C# supports component-oriented programming through the concepts of properties, methods, events, and attributes for self-contained and self-describing components of functionality for robust and scalable applications.  Structured Programming Language The structured design and modularization in C# break a problem into parts, using functions for easy implementation to solve significant problems.  Rich Library C# has a standard library with many inbuilt functions for easy and fast development.  Full Stack Java Developer Course The Gateway to Master Web DevelopmentEXPLORE COURSEFull Stack Java Developer Course Prerequisites for Learning C#  Basic knowledge of C or C++ or any programming language or programming fundamentals.  Additionally, the OOP concept makes for a short learning curve of C#. Advantages of C#  There are many advantages to the C# language that makes it a useful programming language compared to other languages like Java, C, or C++. These include:  Being an object-oriented language, C# allows you to create modular, maintainable applications and reusable codes Familiar syntax Easy to develop as it has a rich class of libraries for smooth implementation of functions  Enhanced integration as an application written in .NET will integrate and interpret better when compared to other NET technologies  As C# runs on CLR, it makes it easy to integrate with components written in other languages It\u2019s safe, with no data loss as there is no type-conversion so that you can write secure codes The automatic garbage collection keeps the system clean and doesn\u2019t hang it during execution As your machine has to install the .NET Framework to run C#, it supports cross-platform Strong memory backup prevents memory leakage  Programming support of the Microsoft ecosystem makes development easy and seamless Low maintenance cost, as C# can develop iOS, Android, and Windows Phone native apps The syntax is similar to C, C++, and Java, which makes it easier to learn and work with C# Useful as it can develop iOS, Android, and Windows Phone native apps with the Xamarin Framework C# is the most powerful programming language for the .NET Framework Fast development as C# is open source steered by Microsoft with access to open source projects and tools on Github, and many active communities contributing to the improvement What Can C Sharp Do for You? C# can be used to develop a wide range of:  Windows client applications Windows libraries and components Windows services Web applications Native iOS and Android mobile apps Azure cloud applications and services Gaming consoles and gaming systems Video and virtual reality games Interoperability software like SharePoint Enterprise software Backend services and database programs AI and ML applications Distributed applications Hardware-level programming Virus and malware software GUI-based applications IoT devices Blockchain and distributed ledger technology   Who Should Learn the C# Programming Language and Why?  C# is one of the most popular programming languages as it can be used for a variety of applications: mobile apps, game development, and enterprise software. What\u2019s more, the C# 8.0 version is packed with several new features and enhancements to the C# language that can change the way developers write their C# code. The most important new features available are \u2018null reference types,\u2019 enhanced \u2018pattern matching,\u2019 and \u2018async streams\u2019 that help you to write more reliable and readable code.   As you\u2019re exposed to the fundamental programming concepts of C# in this course, you can work on projects that open the doors for you as a Full Stack Java Developer. So, upskill and master the C# language for a faster career trajectory and salary scope.",
        "fork": false,
        "url": "https://api.github.com/repos/sanusanth/c-basic-programs",
        "forks_url": "https://api.github.com/repos/sanusanth/c-basic-programs/forks",
        "keys_url": "https://api.github.com/repos/sanusanth/c-basic-programs/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/sanusanth/c-basic-programs/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/sanusanth/c-basic-programs/teams",
        "hooks_url": "https://api.github.com/repos/sanusanth/c-basic-programs/hooks",
        "issue_events_url": "https://api.github.com/repos/sanusanth/c-basic-programs/issues/events{/number}",
        "events_url": "https://api.github.com/repos/sanusanth/c-basic-programs/events",
        "assignees_url": "https://api.github.com/repos/sanusanth/c-basic-programs/assignees{/user}",
        "branches_url": "https://api.github.com/repos/sanusanth/c-basic-programs/branches{/branch}",
        "tags_url": "https://api.github.com/repos/sanusanth/c-basic-programs/tags",
        "blobs_url": "https://api.github.com/repos/sanusanth/c-basic-programs/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/sanusanth/c-basic-programs/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/sanusanth/c-basic-programs/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/sanusanth/c-basic-programs/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/sanusanth/c-basic-programs/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/sanusanth/c-basic-programs/languages",
        "stargazers_url": "https://api.github.com/repos/sanusanth/c-basic-programs/stargazers",
        "contributors_url": "https://api.github.com/repos/sanusanth/c-basic-programs/contributors",
        "subscribers_url": "https://api.github.com/repos/sanusanth/c-basic-programs/subscribers",
        "subscription_url": "https://api.github.com/repos/sanusanth/c-basic-programs/subscription",
        "commits_url": "https://api.github.com/repos/sanusanth/c-basic-programs/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/sanusanth/c-basic-programs/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/sanusanth/c-basic-programs/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/sanusanth/c-basic-programs/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/sanusanth/c-basic-programs/contents/{+path}",
        "compare_url": "https://api.github.com/repos/sanusanth/c-basic-programs/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/sanusanth/c-basic-programs/merges",
        "archive_url": "https://api.github.com/repos/sanusanth/c-basic-programs/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/sanusanth/c-basic-programs/downloads",
        "issues_url": "https://api.github.com/repos/sanusanth/c-basic-programs/issues{/number}",
        "pulls_url": "https://api.github.com/repos/sanusanth/c-basic-programs/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/sanusanth/c-basic-programs/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/sanusanth/c-basic-programs/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/sanusanth/c-basic-programs/labels{/name}",
        "releases_url": "https://api.github.com/repos/sanusanth/c-basic-programs/releases{/id}",
        "deployments_url": "https://api.github.com/repos/sanusanth/c-basic-programs/deployments",
        "created_at": "2021-02-05T03:54:20Z",
        "updated_at": "2024-04-19T11:31:52Z",
        "pushed_at": "2021-07-24T11:30:02Z",
        "git_url": "git://github.com/sanusanth/c-basic-programs.git",
        "ssh_url": "git@github.com:sanusanth/c-basic-programs.git",
        "clone_url": "https://github.com/sanusanth/c-basic-programs.git",
        "svn_url": "https://github.com/sanusanth/c-basic-programs",
        "homepage": null,
        "size": 111,
        "stargazers_count": 30,
        "watchers_count": 30,
        "language": null,
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "has_discussions": false,
        "forks_count": 16,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 0,
        "license": null,
        "allow_forking": true,
        "is_template": false,
        "web_commit_signoff_required": false,
        "topics": [],
        "visibility": "public",
        "forks": 16,
        "open_issues": 0,
        "watchers": 30,
        "default_branch": "main",
        "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
        },
        "score": 1.0
    },
    {
        "id": 522204050,
        "node_id": "R_kgDOHyAzkg",
        "name": "turbo-garbanzo",
        "full_name": "mercerheather476/turbo-garbanzo",
        "private": false,
        "owner": {
            "login": "mercerheather476",
            "id": 110264851,
            "node_id": "U_kgDOBpKCEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/110264851?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mercerheather476",
            "html_url": "https://github.com/mercerheather476",
            "followers_url": "https://api.github.com/users/mercerheather476/followers",
            "following_url": "https://api.github.com/users/mercerheather476/following{/other_user}",
            "gists_url": "https://api.github.com/users/mercerheather476/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mercerheather476/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mercerheather476/subscriptions",
            "organizations_url": "https://api.github.com/users/mercerheather476/orgs",
            "repos_url": "https://api.github.com/users/mercerheather476/repos",
            "events_url": "https://api.github.com/users/mercerheather476/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mercerheather476/received_events",
            "type": "User",
            "site_admin": false
        },
        "html_url": "https://github.com/mercerheather476/turbo-garbanzo",
        "description": "![AppAuth for Android](https://rawgit.com/openid/AppAuth-Android/master/appauth_lockup.svg)  [![Download](https://img.shields.io/maven-central/v/net.openid/appauth)](https://search.maven.org/search?q=g:net.openid%20appauth) [![Javadocs](http://javadoc.io/badge/net.openid/appauth.svg)](http://javadoc.io/doc/net.openid/appauth) [![Build Status](https://github.com/openid/AppAuth-Android/actions/workflows/build.yml/badge.svg)](https://github.com/openid/AppAuth-Android/actions/workflows/build.yml) [![codecov.io](https://codecov.io/github/openid/AppAuth-Android/coverage.svg?branch=master)](https://codecov.io/github/openid/AppAuth-Android?branch=master)  AppAuth for Android is a client SDK for communicating with [OAuth 2.0](https://tools.ietf.org/html/rfc6749) and [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html) providers. It strives to directly map the requests and responses of those specifications, while following the idiomatic style of the implementation language. In addition to mapping the raw protocol flows, convenience methods are available to assist with common tasks like performing an action with fresh tokens.  The library follows the best practices set out in [RFC 8252 - OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252), including using [Custom Tabs](https://developer.chrome.com/multidevice/android/customtabs) for authorization requests. For this reason, `WebView` is explicitly *not* supported due to usability and security reasons.  The library also supports the [PKCE](https://tools.ietf.org/html/rfc7636) extension to OAuth which was created to secure authorization codes in public clients when custom URI scheme redirects are used. The library is friendly to other extensions (standard or otherwise) with the ability to handle additional parameters in all protocol requests and responses.  A talk providing an overview of using the library for enterprise single sign-on (produced by Google) can be found here: [Enterprise SSO with Chrome Custom Tabs](https://www.youtube.com/watch?v=DdQTXrk6YTk).  ## Download  AppAuth for Android is available on [MavenCentral](https://search.maven.org/search?q=g:net.openid%20appauth)  ```groovy implementation 'net.openid:appauth:<version>' ```  ## Requirements  AppAuth supports Android API 16 (Jellybean) and above. Browsers which provide a custom tabs implementation are preferred by the library, but not required. Both Custom URI Schemes (all supported versions of Android) and App Links (Android M / API 23+) can be used with the library.  In general, AppAuth can work with any Authorization Server (AS) that supports native apps as documented in [RFC 8252](https://tools.ietf.org/html/rfc8252), either through custom URI scheme redirects, or App Links. AS's that assume all clients are web-based or require clients to maintain confidentiality of the client secrets may not work well.  ## Demo app  A demo app is contained within this repository. For instructions on how to build and configure this app, see the [demo app readme](https://github.com/openid/AppAuth-Android/blob/master/app/README.md).  ## Conceptual overview  AppAuth encapsulates the authorization state of the user in the [net.openid.appauth.AuthState](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthState.java) class, and communicates with an authorization server through the use of the [net.openid.appauth.AuthorizationService](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java) class. AuthState is designed to be easily persistable as a JSON string, using the storage mechanism of your choice (e.g. [SharedPreferences](https://developer.android.com/training/basics/data-storage/shared-preferences.html), [sqlite](https://developer.android.com/training/basics/data-storage/databases.html), or even just [in a file](https://developer.android.com/training/basics/data-storage/files.html)).  AppAuth provides data classes which are intended to model the OAuth2 specification as closely as possible; this provides the greatest flexibility in interacting with a wide variety of OAuth2 and OpenID Connect implementations.  Authorizing the user occurs via the user's web browser, and the request is described using instances of [AuthorizationRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationRequest.java). The request is dispatched using [performAuthorizationRequest()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java#L159) on an AuthorizationService instance, and the response (an [AuthorizationResponse](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationResponse.java) instance) will be dispatched to the activity of your choice, expressed via an Intent.  Token requests, such as obtaining a new access token using a refresh token, follow a similar pattern: [TokenRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/TokenRequest.java) instances are dispatched using [performTokenRequest()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java#L252) on an AuthorizationService instance, and a [TokenResponse](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/TokenResponse.java) instance is returned via a callback.  Responses can be provided to the [update()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthState.java#L367) methods on AuthState in order to track and persist changes to the authorization state. Once in an authorized state, the [performActionWithFreshTokens()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthState.java#L449) method on AuthState can be used to automatically refresh access tokens as necessary before performing actions that require valid tokens.  ## Implementing the authorization code flow  It is recommended that native apps use the [authorization code](https://tools.ietf.org/html/rfc6749#section-1.3.1) flow with a public client to gain authorization to access user data. This has the primary advantage for native clients that the authorization flow, which must occur in a browser, only needs to be performed once.  This flow is effectively composed of four stages:  1. Discovering or specifying the endpoints to interact with the provider. 2. Authorizing the user, via a browser, in order to obtain an authorization    code. 3. Exchanging the authorization code with the authorization server, to obtain    a refresh token and/or ID token. 4. Using access tokens derived from the refresh token to interact with a    resource server for further access to user data.  At each step of the process, an AuthState instance can (optionally) be updated with the result to help with tracking the state of the flow.  ### Authorization service configuration  First, AppAuth must be instructed how to interact with the authorization service. This can be done either by directly creating an [AuthorizationServiceConfiguration](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationServiceConfiguration.java#L102) instance, or by retrieving an OpenID Connect discovery document.  Directly specifying an AuthorizationServiceConfiguration involves providing the URIs of the authorization endpoint and token endpoint, and optionally a dynamic client registration endpoint (see \"Dynamic client registration\" for more info):  ```java AuthorizationServiceConfiguration serviceConfig =     new AuthorizationServiceConfiguration(         Uri.parse(\"https://idp.example.com/auth\"), // authorization endpoint         Uri.parse(\"https://idp.example.com/token\")); // token endpoint ```  Where available, using an OpenID Connect discovery document is preferable:  ```java AuthorizationServiceConfiguration.fetchFromIssuer(     Uri.parse(\"https://idp.example.com\"),     new AuthorizationServiceConfiguration.RetrieveConfigurationCallback() {       public void onFetchConfigurationCompleted(           @Nullable AuthorizationServiceConfiguration serviceConfiguration,           @Nullable AuthorizationException ex) {         if (ex != null) {           Log.e(TAG, \"failed to fetch configuration\");           return;         }          // use serviceConfiguration as needed     } }); ```  This will attempt to download a discovery document from the standard location under this base URI, `https://idp.example.com/.well-known/openid-configuration`. If the discovery document for your IDP is in some other non-standard location, you can instead provide the full URI as follows:  ```java AuthorizationServiceConfiguration.fetchFromUrl(     Uri.parse(\"https://idp.example.com/exampletenant/openid-config\"),     new AuthorizationServiceConfiguration.RetrieveConfigurationCallback() {         ...     } }); ```  If desired, this configuration can be used to seed an AuthState instance, to persist the configuration easily:  ```java AuthState authState = new AuthState(serviceConfig); ```  ### Obtaining an authorization code  An authorization code can now be acquired by constructing an AuthorizationRequest, using its Builder. In AppAuth, the builders for each data class accept the mandatory parameters via the builder constructor:  ```java AuthorizationRequest.Builder authRequestBuilder =     new AuthorizationRequest.Builder(         serviceConfig, // the authorization service configuration         MY_CLIENT_ID, // the client ID, typically pre-registered and static         ResponseTypeValues.CODE, // the response_type value: we want a code         MY_REDIRECT_URI); // the redirect URI to which the auth response is sent ```  Other optional parameters, such as the OAuth2 [scope string](https://tools.ietf.org/html/rfc6749#section-3.3) or OpenID Connect [login hint](http://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.1.2.1) are specified through set methods on the builder:  ```java AuthorizationRequest authRequest = authRequestBuilder     .setScope(\"openid email profile https://idp.example.com/custom-scope\")     .setLoginHint(\"jdoe@user.example.com\")     .build(); ```  This request can then be dispatched using one of two approaches.  a `startActivityForResult` call using an Intent returned from the `AuthorizationService`, or by calling `performAuthorizationRequest` and providing pending intent for completion and cancelation handling activities.  The `startActivityForResult` approach is simpler to use but may require more processing of the result:  ```java private void doAuthorization() {   AuthorizationService authService = new AuthorizationService(this);   Intent authIntent = authService.getAuthorizationRequestIntent(authRequest);   startActivityForResult(authIntent, RC_AUTH); }  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {   if (requestCode == RC_AUTH) {     AuthorizationResponse resp = AuthorizationResponse.fromIntent(data);     AuthorizationException ex = AuthorizationException.fromIntent(data);     // ... process the response or exception ...   } else {     // ...   } } ```  If instead you wish to directly transition to another activity on completion or cancelation, you can use `performAuthorizationRequest`:  ```java AuthorizationService authService = new AuthorizationService(this);  authService.performAuthorizationRequest(     authRequest,     PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCompleteActivity.class), 0),     PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCanceledActivity.class), 0)); ```  The intents may be customized to carry any additional data or flags required for the correct handling of the authorization response.  #### Capturing the authorization redirect  Once the authorization flow is completed in the browser, the authorization service will redirect to a URI specified as part of the authorization request, providing the response via query parameters. In order for your app to capture this response, it must register with the Android OS as a handler for this redirect URI.  We recommend using a custom scheme based redirect URI (i.e. those of form `my.scheme:/path`), as this is the most widely supported across all versions of Android. To avoid conflicts with other apps, it is recommended to configure a  distinct scheme using \"reverse domain name notation\". This can either match your service web domain (in reverse) e.g. `com.example.service` or your package name `com.example.app` or be something completely new as long as it's distinct enough. Using the package name of your app is quite common but it's not always possible if it contains illegal characters for URI schemes (like underscores) or if you already have another handler for that scheme - so just use something else.  When a custom scheme is used, AppAuth can be easily configured to capture all redirects using this custom scheme through a manifest placeholder:  ```groovy android.defaultConfig.manifestPlaceholders = [   'appAuthRedirectScheme': 'com.example.app' ] ```  Alternatively, the redirect URI can be directly configured by adding an intent-filter for AppAuth's RedirectUriReceiverActivity to your AndroidManifest.xml:  ```xml <activity         android:name=\"net.openid.appauth.RedirectUriReceiverActivity\"         tools:node=\"replace\">     <intent-filter>         <action android:name=\"android.intent.action.VIEW\"/>         <category android:name=\"android.intent.category.DEFAULT\"/>         <category android:name=\"android.intent.category.BROWSABLE\"/>         <data android:scheme=\"com.example.app\"/>     </intent-filter> </activity> ```  If an HTTPS redirect URI is required instead of a custom scheme, the same approach (modifying your AndroidManifest.xml) is used:  ```xml <activity         android:name=\"net.openid.appauth.RedirectUriReceiverActivity\"         tools:node=\"replace\">     <intent-filter>         <action android:name=\"android.intent.action.VIEW\"/>         <category android:name=\"android.intent.category.DEFAULT\"/>         <category android:name=\"android.intent.category.BROWSABLE\"/>         <data android:scheme=\"https\"               android:host=\"app.example.com\"               android:path=\"/oauth2redirect\"/>     </intent-filter> </activity> ```  HTTPS redirects can be secured by configuring the redirect URI as an [app link](https://developer.android.com/training/app-links/index.html) in Android M and above. We recommend that a fallback page be configured at the same address to forward authorization responses to your app via a custom scheme, for older Android devices.  #### Handling the authorization response  Upon completion of the authorization flow, the completion Intent provided to performAuthorizationRequest will be triggered. The authorization response is provided to this activity via Intent extra data, which can be extracted using the `fromIntent()` methods on AuthorizationResponse and AuthorizationException respectively:  ```java public void onCreate(Bundle b) {   AuthorizationResponse resp = AuthorizationResponse.fromIntent(getIntent());   AuthorizationException ex = AuthorizationException.fromIntent(getIntent());   if (resp != null) {     // authorization completed   } else {     // authorization failed, check ex for more details   }   // ... } ```  The response can be provided to the AuthState instance for easy persistence and further processing:  ``` authState.update(resp, ex); ```  If the full redirect URI is required in order to extract additional information that AppAuth does not provide, this is also provided to your activity:  ```java public void onCreate(Bundle b) {   // ...   Uri redirectUri = getIntent().getData();   // ... } ```  ### Exchanging the authorization code  Given a successful authorization response carrying an authorization code, a token request can be made to exchange the code for a refresh token:  ```java authService.performTokenRequest(     resp.createTokenExchangeRequest(),     new AuthorizationService.TokenResponseCallback() {       @Override public void onTokenRequestCompleted(             TokenResponse resp, AuthorizationException ex) {           if (resp != null) {             // exchange succeeded           } else {             // authorization failed, check ex for more details           }         }     }); ```  The token response can also be used to update an AuthState instance:  ```java authState.update(resp, ex); ```  ### Using access tokens  Finally, the retrieved access token can be used to interact with a resource server. This can be done directly, by extracting the access token from a token response. However, in most cases, it is simpler to use the `performActionWithFreshTokens` utility method provided by AuthState:  ```java authState.performActionWithFreshTokens(service, new AuthStateAction() {   @Override public void execute(       String accessToken,       String idToken,       AuthorizationException ex) {     if (ex != null) {       // negotiation for fresh tokens failed, check ex for more details       return;     }      // use the access token to do something ...   } }); ```  This also updates the AuthState object with current access, id, and refresh tokens. If you are storing your AuthState in persistent storage, you should write the updated copy in the callback to this method.  ### Ending current session  Given you have a logged in session and you want to end it. In that case you need to get: - `AuthorizationServiceConfiguration` - valid Open Id Token that you should get after authentication - End of session URI that should be provided within you OpenId service config  First you have to build EndSessionRequest  ```java EndSessionRequest endSessionRequest =     new EndSessionRequest.Builder(authorizationServiceConfiguration)         .setIdTokenHint(idToken)         .setPostLogoutRedirectUri(endSessionRedirectUri)         .build(); ``` This request can then be dispatched using one of two approaches.  a `startActivityForResult` call using an Intent returned from the `AuthorizationService`, or by calling `performEndSessionRequest` and providing pending intent for completion and cancelation handling activities.  The startActivityForResult approach is simpler to use but may require more processing of the result:  ```java private void endSession() {   AuthorizationService authService = new AuthorizationService(this);   Intent endSessionItent = authService.getEndSessionRequestIntent(endSessionRequest);   startActivityForResult(endSessionItent, RC_END_SESSION); }  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {   if (requestCode == RC_END_SESSION) {     EndSessionResonse resp = EndSessionResonse.fromIntent(data);     AuthorizationException ex = AuthorizationException.fromIntent(data);     // ... process the response or exception ...   } else {     // ...   } } ``` If instead you wish to directly transition to another activity on completion or cancelation, you can use `performEndSessionRequest`:  ```java AuthorizationService authService = new AuthorizationService(this);  authService.performEndSessionRequest(     endSessionRequest,     PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCompleteActivity.class), 0),     PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCanceledActivity.class), 0)); ```  End session flow will also work involving browser mechanism that is described in authorization mechanism session. Handling response mechanism with transition to another activity should be as follows:   ```java public void onCreate(Bundle b) {   EndSessionResponse resp = EndSessionResponse.fromIntent(getIntent());   AuthorizationException ex = AuthorizationException.fromIntent(getIntent());   if (resp != null) {     // authorization completed   } else {     // authorization failed, check ex for more details   }   // ... } ```  ### AuthState persistence  Instances of `AuthState` keep track of the authorization and token requests and responses. This is the only object that you need to persist to retain the authorization state of the session. Typically, one would do this by storing the authorization state in SharedPreferences or some other persistent store private to the app:  ```java @NonNull public AuthState readAuthState() {   SharedPreferences authPrefs = getSharedPreferences(\"auth\", MODE_PRIVATE);   String stateJson = authPrefs.getString(\"stateJson\", null);   if (stateJson != null) {     return AuthState.jsonDeserialize(stateJson);   } else {     return new AuthState();   } }  public void writeAuthState(@NonNull AuthState state) {   SharedPreferences authPrefs = getSharedPreferences(\"auth\", MODE_PRIVATE);   authPrefs.edit()       .putString(\"stateJson\", state.jsonSerializeString())       .apply(); } ```  The demo app has an [AuthStateManager](https://github.com/openid/AppAuth-Android/blob/master/app/java/net/openid/appauthdemo/AuthStateManager.java) type which demonstrates this in more detail.  ## Advanced configuration  AppAuth provides some advanced configuration options via [AppAuthConfiguration](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AppAuthConfiguration.java) instances, which can be provided to [AuthorizationService](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java) during construction.  ### Controlling which browser is used for authorization  Some applications require explicit control over which browsers can be used for authorization - for example, to require that Chrome be used for second factor authentication to work, or require that some custom browser is used for authentication in an enterprise environment.  Control over which browsers can be used can be achieved by defining a [BrowserMatcher](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserMatcher.java), and supplying this to the builder of AppAuthConfiguration. A BrowserMatcher is suppled with a [BrowserDescriptor](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserDescriptor.java) instance, and must decide whether this browser is permitted for the authorization flow.  By default, [AnyBrowserMatcher](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/AnyBrowserMatcher.java) is used.  For your convenience, utility classes to help define a browser matcher are provided, such as:  - [Browsers](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/Browsers.java):   contains a set of constants for the official package names and signatures   of Chrome, Firefox and Samsung SBrowser. - [VersionedBrowserMatcher](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/VersionedBrowserMatcher.java):   will match a browser if it has a matching package name and signature, and   a version number within a defined   [VersionRange](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/VersionRange.java). This class also provides some static instances for matching   Chrome, Firefox and Samsung SBrowser. - [BrowserAllowList](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserAllowList.java):   takes a list of BrowserMatcher instances, and will match a browser if any   of these child BrowserMatcher instances signals a match. - [BrowserDenyList](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserDenyList.java):   the inverse of BrowserAllowList - takes a list of browser matcher instances,   and will match a browser if it _does not_ match any of these child   BrowserMatcher instances.  For instance, in order to restrict the authorization flow to using Chrome or SBrowser as a custom tab:  ```java AppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()     .setBrowserMatcher(new BrowserAllowList(         VersionedBrowserMatcher.CHROME_CUSTOM_TAB,         VersionedBrowserMatcher.SAMSUNG_CUSTOM_TAB))     .build(); AuthorizationService authService =         new AuthorizationService(context, appAuthConfig); ```  Or, to prevent the use of a buggy version of the custom tabs in Samsung SBrowser:  ```java AppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()     .setBrowserMatcher(new BrowserDenyList(         new VersionedBrowserMatcher(             Browsers.SBrowser.PACKAGE_NAME,             Browsers.SBrowser.SIGNATURE_SET,             true, // when this browser is used via a custom tab             VersionRange.atMost(\"5.3\")         )))     .build(); AuthorizationService authService =         new AuthorizationService(context, appAuthConfig); ```  ### Customizing the connection builder for HTTP requests  It can be desirable to customize how HTTP connections are made when performing token requests, for instance to use [certificate pinning](https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning) or to add additional trusted certificate authorities for an enterprise environment. This can be achieved in AppAuth by providing a custom [ConnectionBuilder](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/connectivity/ConnectionBuilder.java) instance.  For example, to custom the SSL socket factory used, one could do the following:  ```java AppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()     .setConnectionBuilder(new ConnectionBuilder() {       public HttpURLConnection openConnect(Uri uri) throws IOException {         URL url = new URL(uri.toString());         HttpURLConnection connection =             (HttpURLConnection) url.openConnection();         if (connection instanceof HttpsUrlConnection) {           HttpsURLConnection connection = (HttpsURLConnection) connection;           connection.setSSLSocketFactory(MySocketFactory.getInstance());         }       }     })     .build(); ```  ### Issues with [ID Token](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/IdToken.java#L118) validation  ID Token validation was introduced in `0.8.0` but not all authorization servers or configurations support it correctly.  - For testing environments [setSkipIssuerHttpsCheck](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AppAuthConfiguration.java#L129) can be used to bypass the fact the issuer needs to be HTTPS.  ```java AppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()     .setSkipIssuerHttpsCheck(true)     .build() ```  - For services that don't support nonce[s] resulting in **IdTokenException** `Nonce mismatch` just set nonce to `null` on the `AuthorizationRequest`. Please consider **raising an issue** with your Identity Provider and removing this once it is fixed.  ```java AuthorizationRequest authRequest = authRequestBuilder     .setNonce(null)     .build(); ```  ## Dynamic client registration  AppAuth supports the [OAuth2 dynamic client registration protocol](https://tools.ietf.org/html/rfc7591). In order to dynamically register a client, create a [RegistrationRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/RegistrationRequest.java) and dispatch it using [performRegistrationRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java#L278) on your AuthorizationService instance.  The registration endpoint can either be defined directly as part of your [AuthorizationServiceConfiguration](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationServiceConfiguration.java), or discovered from an OpenID Connect discovery document.  ```java RegistrationRequest registrationRequest = new RegistrationRequest.Builder(     serviceConfig,     Arrays.asList(redirectUri))     .build(); ```  Requests are dispatched with the help of `AuthorizationService`. As this request is asynchronous the response is passed to a callback:  ```java service.performRegistrationRequest(     registrationRequest,     new AuthorizationService.RegistrationResponseCallback() {         @Override public void onRegistrationRequestCompleted(             @Nullable RegistrationResponse resp,             @Nullable AuthorizationException ex) {             if (resp != null) {                 // registration succeeded, store the registration response                 AuthState state = new AuthState(resp);                 //proceed to authorization...             } else {               // registration failed, check ex for more details             }          }     }); ```  ## Utilizing client secrets (DANGEROUS)  We _strongly recommend_ you avoid using static client secrets in your native applications whenever possible. Client secrets derived via a dynamic client registration are safe to use, but static client secrets can be easily extracted from your apps and allow others to impersonate your app and steal user data. If client secrets must be used by the OAuth2 provider you are integrating with, we strongly recommend performing the code exchange step on your backend, where the client secret can be kept hidden.  Having said this, in some cases using client secrets is unavoidable. In these cases, a [ClientAuthentication](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/ClientAuthentication.java) instance can be provided to AppAuth when performing a token request. This allows additional parameters (both HTTP headers and request body parameters) to be added to token requests. Two standard implementations of ClientAuthentication are provided:  - [ClientSecretBasic](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/ClientSecretBasic.java):   includes a client ID and client secret as an HTTP Basic Authorization header. - [ClientSecretPost](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/ClientSecretPost.java):   includes a client ID and client secret as additional request parameters.  So, in order to send a token request using HTTP basic authorization, one would write:  ```java ClientAuthentication clientAuth = new ClientSecretBasic(MY_CLIENT_SECRET); TokenRequest req = ...; authService.performTokenRequest(req, clientAuth, callback); ```  This can also be done when using `performActionWithFreshTokens` on AuthState:  ```java ClientAuthentication clientAuth = new ClientSecretPost(MY_CLIENT_SECRET); authState.performActionWithFreshTokens(     authService,     clientAuth,     action); ```  ## Modifying or contributing to AppAuth  This project requires the Android SDK for API level 25 (Nougat) to build, though the produced binaries only require API level 16 (Jellybean) to be used. We recommend that you fork and/or clone this repository to make modifications; downloading the source has been known to cause some developers problems.  For contributors, see the additional instructions in [CONTRIBUTING.md](https://github.com/openid/AppAuth-Android/blob/master/CONTRIBUTING.md).  ### Building from the Command line  AppAuth for Android uses Gradle as its build system. In order to build the library and app binaries, run `./gradlew assemble`. The library AAR files are output to `library/build/outputs/aar`, while the demo app is output to `app/build/outputs/apk`. In order to run the tests and code analysis, run `./gradlew check`.  ### Building from Android Studio  In AndroidStudio, File -> New -> Import project. Select the root folder (the one with the `build.gradle` file).",
        "fork": false,
        "url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo",
        "forks_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/forks",
        "keys_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/teams",
        "hooks_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/hooks",
        "issue_events_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/issues/events{/number}",
        "events_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/events",
        "assignees_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/assignees{/user}",
        "branches_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/branches{/branch}",
        "tags_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/tags",
        "blobs_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/languages",
        "stargazers_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/stargazers",
        "contributors_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/contributors",
        "subscribers_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/subscribers",
        "subscription_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/subscription",
        "commits_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/contents/{+path}",
        "compare_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/merges",
        "archive_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/downloads",
        "issues_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/issues{/number}",
        "pulls_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/labels{/name}",
        "releases_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/releases{/id}",
        "deployments_url": "https://api.github.com/repos/mercerheather476/turbo-garbanzo/deployments",
        "created_at": "2022-08-07T12:15:53Z",
        "updated_at": "2024-04-02T00:44:03Z",
        "pushed_at": "2022-08-07T12:16:51Z",
        "git_url": "git://github.com/mercerheather476/turbo-garbanzo.git",
        "ssh_url": "git@github.com:mercerheather476/turbo-garbanzo.git",
        "clone_url": "https://github.com/mercerheather476/turbo-garbanzo.git",
        "svn_url": "https://github.com/mercerheather476/turbo-garbanzo",
        "homepage": "",
        "size": 24,
        "stargazers_count": 11,
        "watchers_count": 11,
        "language": null,
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "has_discussions": false,
        "forks_count": 4,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 7,
        "license": {
            "key": "gpl-3.0",
            "name": "GNU General Public License v3.0",
            "spdx_id": "GPL-3.0",
            "url": "https://api.github.com/licenses/gpl-3.0",
            "node_id": "MDc6TGljZW5zZTk="
        },
        "allow_forking": true,
        "is_template": false,
        "web_commit_signoff_required": false,
        "topics": [],
        "visibility": "public",
        "forks": 4,
        "open_issues": 7,
        "watchers": 11,
        "default_branch": "main",
        "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
        },
        "score": 1.0
    },
    {
        "id": 275383144,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNzUzODMxNDQ=",
        "name": "Machine-Learning-Interview-Preparation",
        "full_name": "reddyprasade/Machine-Learning-Interview-Preparation",
        "private": false,
        "owner": {
            "login": "reddyprasade",
            "id": 15084222,
            "node_id": "MDQ6VXNlcjE1MDg0MjIy",
            "avatar_url": "https://avatars.githubusercontent.com/u/15084222?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reddyprasade",
            "html_url": "https://github.com/reddyprasade",
            "followers_url": "https://api.github.com/users/reddyprasade/followers",
            "following_url": "https://api.github.com/users/reddyprasade/following{/other_user}",
            "gists_url": "https://api.github.com/users/reddyprasade/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reddyprasade/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reddyprasade/subscriptions",
            "organizations_url": "https://api.github.com/users/reddyprasade/orgs",
            "repos_url": "https://api.github.com/users/reddyprasade/repos",
            "events_url": "https://api.github.com/users/reddyprasade/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reddyprasade/received_events",
            "type": "User",
            "site_admin": false
        },
        "html_url": "https://github.com/reddyprasade/Machine-Learning-Interview-Preparation",
        "description": "Prepare to Technical Skills Here are the essential skills that a Machine Learning Engineer needs, as mentioned Read me files. Within each group are topics that you should be familiar with.  Study Tip: Copy and paste this list into a document and save to your computer for easy referral.  Computer Science Fundamentals and Programming Topics  Data structures: Lists, stacks, queues, strings, hash maps, vectors, matrices, classes & objects, trees, graphs, etc. Algorithms: Recursion, searching, sorting, optimization, dynamic programming, etc. Computability and complexity: P vs. NP, NP-complete problems, big-O notation, approximate algorithms, etc. Computer architecture: Memory, cache, bandwidth, threads & processes, deadlocks, etc. Probability and Statistics Topics  Basic probability: Conditional probability, Bayes rule, likelihood, independence, etc. Probabilistic models: Bayes Nets, Markov Decision Processes, Hidden Markov Models, etc. Statistical measures: Mean, median, mode, variance, population parameters vs. sample statistics etc. Proximity and error metrics: Cosine similarity, mean-squared error, Manhattan and Euclidean distance, log-loss, etc. Distributions and random sampling: Uniform, normal, binomial, Poisson, etc. Analysis methods: ANOVA, hypothesis testing, factor analysis, etc. Data Modeling and Evaluation Topics  Data preprocessing: Munging/wrangling, transforming, aggregating, etc. Pattern recognition: Correlations, clusters, trends, outliers & anomalies, etc. Dimensionality reduction: Eigenvectors, Principal Component Analysis, etc. Prediction: Classification, regression, sequence prediction, etc.; suitable error/accuracy metrics. Evaluation: Training-testing split, sequential vs. randomized cross-validation, etc. Applying Machine Learning Algorithms and Libraries Topics  Models: Parametric vs. nonparametric, decision tree, nearest neighbor, neural net, support vector machine, ensemble of multiple models, etc. Learning procedure: Linear regression, gradient descent, genetic algorithms, bagging, boosting, and other model-specific methods; regularization, hyperparameter tuning, etc. Tradeoffs and gotchas: Relative advantages and disadvantages, bias and variance, overfitting and underfitting, vanishing/exploding gradients, missing data, data leakage, etc. Software Engineering and System Design Topics  Software interface: Library calls, REST APIs, data collection endpoints, database queries, etc. User interface: Capturing user inputs & application events, displaying results & visualization, etc. Scalability: Map-reduce, distributed processing, etc. Deployment: Cloud hosting, containers & instances, microservices, etc. Move on to the final lesson of this course to find lots of sample practice questions for each topic!",
        "fork": false,
        "url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation",
        "forks_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/forks",
        "keys_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/teams",
        "hooks_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/hooks",
        "issue_events_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/issues/events{/number}",
        "events_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/events",
        "assignees_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/assignees{/user}",
        "branches_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/branches{/branch}",
        "tags_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/tags",
        "blobs_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/languages",
        "stargazers_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/stargazers",
        "contributors_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/contributors",
        "subscribers_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/subscribers",
        "subscription_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/subscription",
        "commits_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/contents/{+path}",
        "compare_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/merges",
        "archive_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/downloads",
        "issues_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/issues{/number}",
        "pulls_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/labels{/name}",
        "releases_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/releases{/id}",
        "deployments_url": "https://api.github.com/repos/reddyprasade/Machine-Learning-Interview-Preparation/deployments",
        "created_at": "2020-06-27T13:57:35Z",
        "updated_at": "2024-02-27T23:32:50Z",
        "pushed_at": "2020-08-13T16:48:49Z",
        "git_url": "git://github.com/reddyprasade/Machine-Learning-Interview-Preparation.git",
        "ssh_url": "git@github.com:reddyprasade/Machine-Learning-Interview-Preparation.git",
        "clone_url": "https://github.com/reddyprasade/Machine-Learning-Interview-Preparation.git",
        "svn_url": "https://github.com/reddyprasade/Machine-Learning-Interview-Preparation",
        "homepage": null,
        "size": 8874,
        "stargazers_count": 8,
        "watchers_count": 8,
        "language": "Jupyter Notebook",
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "has_discussions": false,
        "forks_count": 2,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 0,
        "license": {
            "key": "apache-2.0",
            "name": "Apache License 2.0",
            "spdx_id": "Apache-2.0",
            "url": "https://api.github.com/licenses/apache-2.0",
            "node_id": "MDc6TGljZW5zZTI="
        },
        "allow_forking": true,
        "is_template": false,
        "web_commit_signoff_required": false,
        "topics": [],
        "visibility": "public",
        "forks": 2,
        "open_issues": 0,
        "watchers": 8,
        "default_branch": "master",
        "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
        },
        "score": 1.0
    },
    {
        "id": 9568767,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NTY4NzY3",
        "name": "odin",
        "full_name": "openEHR/odin",
        "private": false,
        "owner": {
            "login": "openEHR",
            "id": 1481762,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE0ODE3NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1481762?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/openEHR",
            "html_url": "https://github.com/openEHR",
            "followers_url": "https://api.github.com/users/openEHR/followers",
            "following_url": "https://api.github.com/users/openEHR/following{/other_user}",
            "gists_url": "https://api.github.com/users/openEHR/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/openEHR/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/openEHR/subscriptions",
            "organizations_url": "https://api.github.com/users/openEHR/orgs",
            "repos_url": "https://api.github.com/users/openEHR/repos",
            "events_url": "https://api.github.com/users/openEHR/events{/privacy}",
            "received_events_url": "https://api.github.com/users/openEHR/received_events",
            "type": "Organization",
            "site_admin": false
        },
        "html_url": "https://github.com/openEHR/odin",
        "description": "Object Data Instance Notation project",
        "fork": false,
        "url": "https://api.github.com/repos/openEHR/odin",
        "forks_url": "https://api.github.com/repos/openEHR/odin/forks",
        "keys_url": "https://api.github.com/repos/openEHR/odin/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/openEHR/odin/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/openEHR/odin/teams",
        "hooks_url": "https://api.github.com/repos/openEHR/odin/hooks",
        "issue_events_url": "https://api.github.com/repos/openEHR/odin/issues/events{/number}",
        "events_url": "https://api.github.com/repos/openEHR/odin/events",
        "assignees_url": "https://api.github.com/repos/openEHR/odin/assignees{/user}",
        "branches_url": "https://api.github.com/repos/openEHR/odin/branches{/branch}",
        "tags_url": "https://api.github.com/repos/openEHR/odin/tags",
        "blobs_url": "https://api.github.com/repos/openEHR/odin/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/openEHR/odin/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/openEHR/odin/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/openEHR/odin/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/openEHR/odin/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/openEHR/odin/languages",
        "stargazers_url": "https://api.github.com/repos/openEHR/odin/stargazers",
        "contributors_url": "https://api.github.com/repos/openEHR/odin/contributors",
        "subscribers_url": "https://api.github.com/repos/openEHR/odin/subscribers",
        "subscription_url": "https://api.github.com/repos/openEHR/odin/subscription",
        "commits_url": "https://api.github.com/repos/openEHR/odin/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/openEHR/odin/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/openEHR/odin/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/openEHR/odin/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/openEHR/odin/contents/{+path}",
        "compare_url": "https://api.github.com/repos/openEHR/odin/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/openEHR/odin/merges",
        "archive_url": "https://api.github.com/repos/openEHR/odin/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/openEHR/odin/downloads",
        "issues_url": "https://api.github.com/repos/openEHR/odin/issues{/number}",
        "pulls_url": "https://api.github.com/repos/openEHR/odin/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/openEHR/odin/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/openEHR/odin/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/openEHR/odin/labels{/name}",
        "releases_url": "https://api.github.com/repos/openEHR/odin/releases{/id}",
        "deployments_url": "https://api.github.com/repos/openEHR/odin/deployments",
        "created_at": "2013-04-20T18:36:33Z",
        "updated_at": "2022-11-28T16:14:57Z",
        "pushed_at": "2021-01-22T20:13:35Z",
        "git_url": "git://github.com/openEHR/odin.git",
        "ssh_url": "git@github.com:openEHR/odin.git",
        "clone_url": "https://github.com/openEHR/odin.git",
        "svn_url": "https://github.com/openEHR/odin",
        "homepage": null,
        "size": 38,
        "stargazers_count": 5,
        "watchers_count": 5,
        "language": null,
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "has_discussions": false,
        "forks_count": 3,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 0,
        "license": null,
        "allow_forking": true,
        "is_template": false,
        "web_commit_signoff_required": false,
        "topics": [],
        "visibility": "public",
        "forks": 3,
        "open_issues": 0,
        "watchers": 5,
        "default_branch": "master",
        "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
        },
        "score": 1.0
    },
    {
        "id": 18074893,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODA3NDg5Mw==",
        "name": "odin-ruby",
        "full_name": "skoba/odin-ruby",
        "private": false,
        "owner": {
            "login": "skoba",
            "id": 291123,
            "node_id": "MDQ6VXNlcjI5MTEyMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/291123?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skoba",
            "html_url": "https://github.com/skoba",
            "followers_url": "https://api.github.com/users/skoba/followers",
            "following_url": "https://api.github.com/users/skoba/following{/other_user}",
            "gists_url": "https://api.github.com/users/skoba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skoba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skoba/subscriptions",
            "organizations_url": "https://api.github.com/users/skoba/orgs",
            "repos_url": "https://api.github.com/users/skoba/repos",
            "events_url": "https://api.github.com/users/skoba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skoba/received_events",
            "type": "User",
            "site_admin": false
        },
        "html_url": "https://github.com/skoba/odin-ruby",
        "description": "The openEHR project ODIN(Object Data Instance Notation) implementation by Ruby",
        "fork": false,
        "url": "https://api.github.com/repos/skoba/odin-ruby",
        "forks_url": "https://api.github.com/repos/skoba/odin-ruby/forks",
        "keys_url": "https://api.github.com/repos/skoba/odin-ruby/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/skoba/odin-ruby/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/skoba/odin-ruby/teams",
        "hooks_url": "https://api.github.com/repos/skoba/odin-ruby/hooks",
        "issue_events_url": "https://api.github.com/repos/skoba/odin-ruby/issues/events{/number}",
        "events_url": "https://api.github.com/repos/skoba/odin-ruby/events",
        "assignees_url": "https://api.github.com/repos/skoba/odin-ruby/assignees{/user}",
        "branches_url": "https://api.github.com/repos/skoba/odin-ruby/branches{/branch}",
        "tags_url": "https://api.github.com/repos/skoba/odin-ruby/tags",
        "blobs_url": "https://api.github.com/repos/skoba/odin-ruby/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/skoba/odin-ruby/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/skoba/odin-ruby/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/skoba/odin-ruby/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/skoba/odin-ruby/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/skoba/odin-ruby/languages",
        "stargazers_url": "https://api.github.com/repos/skoba/odin-ruby/stargazers",
        "contributors_url": "https://api.github.com/repos/skoba/odin-ruby/contributors",
        "subscribers_url": "https://api.github.com/repos/skoba/odin-ruby/subscribers",
        "subscription_url": "https://api.github.com/repos/skoba/odin-ruby/subscription",
        "commits_url": "https://api.github.com/repos/skoba/odin-ruby/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/skoba/odin-ruby/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/skoba/odin-ruby/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/skoba/odin-ruby/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/skoba/odin-ruby/contents/{+path}",
        "compare_url": "https://api.github.com/repos/skoba/odin-ruby/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/skoba/odin-ruby/merges",
        "archive_url": "https://api.github.com/repos/skoba/odin-ruby/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/skoba/odin-ruby/downloads",
        "issues_url": "https://api.github.com/repos/skoba/odin-ruby/issues{/number}",
        "pulls_url": "https://api.github.com/repos/skoba/odin-ruby/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/skoba/odin-ruby/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/skoba/odin-ruby/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/skoba/odin-ruby/labels{/name}",
        "releases_url": "https://api.github.com/repos/skoba/odin-ruby/releases{/id}",
        "deployments_url": "https://api.github.com/repos/skoba/odin-ruby/deployments",
        "created_at": "2014-03-24T19:08:08Z",
        "updated_at": "2014-03-25T11:08:16Z",
        "pushed_at": "2014-03-25T11:08:16Z",
        "git_url": "git://github.com/skoba/odin-ruby.git",
        "ssh_url": "git@github.com:skoba/odin-ruby.git",
        "clone_url": "https://github.com/skoba/odin-ruby.git",
        "svn_url": "https://github.com/skoba/odin-ruby",
        "homepage": null,
        "size": 140,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Ruby",
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "has_discussions": false,
        "forks_count": 0,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 0,
        "license": {
            "key": "apache-2.0",
            "name": "Apache License 2.0",
            "spdx_id": "Apache-2.0",
            "url": "https://api.github.com/licenses/apache-2.0",
            "node_id": "MDc6TGljZW5zZTI="
        },
        "allow_forking": true,
        "is_template": false,
        "web_commit_signoff_required": false,
        "topics": [],
        "visibility": "public",
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master",
        "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
        },
        "score": 1.0
    }
]