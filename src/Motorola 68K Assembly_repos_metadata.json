[
    {
        "name": "megadev",
        "description": "A Sega Mega CD development framework in C and 68k asm",
        "languages": {
            "C": 197265,
            "Assembly": 109450,
            "Makefile": 1651
        }
    },
    {
        "name": "deluxe68",
        "description": "A simple register allocator frontend for 68k assembly",
        "languages": {
            "C++": 43079,
            "Lua": 2399,
            "C": 450
        }
    },
    {
        "name": "clownassembler",
        "description": "Motorola 68000 assembler, clone of SN 68k (A.K.A. asm68k).",
        "languages": {
            "C": 515425,
            "Assembly": 366514,
            "Yacc": 47252,
            "Lex": 19146,
            "CMake": 4947,
            "Makefile": 919
        }
    },
    {
        "name": "68kTutorials",
        "description": "Tutorials to teach myself 68k assembly",
        "languages": {
            "Assembly": 40655,
            "Shell": 6471
        }
    },
    {
        "name": "ultra-dma-queue",
        "description": "Super fast DMA queue for the Sega Genesis",
        "languages": {
            "Assembly": 16856
        }
    },
    {
        "name": "m68kplugin",
        "description": "Motorola 68000 Series Assembly Language Support for IntelliJ-based IDEs",
        "languages": {
            "Java": 2190055,
            "Assembly": 249041,
            "Lex": 26934,
            "HTML": 2095
        }
    },
    {
        "name": "68k-bcd-verifier",
        "description": "Exhaustive BCD Verifier Sega Genesis ROM for the M68000 processor",
        "languages": {
            "Assembly": 38097,
            "C++": 7147,
            "Makefile": 2985
        }
    },
    {
        "name": "com-cpm",
        "description": "com-cpm: COM, a CP/M-80 simulator (in portable C and 68000 assembly flavors) by Jim Cathey",
        "languages": {
            "Assembly": 639387,
            "C": 297967,
            "Makefile": 6122,
            "Shell": 1387,
            "Pascal": 422
        }
    },
    {
        "name": "mc68000-asm-plugin",
        "description": "Jetbrains IDE plugin for MC68000 assembly language",
        "languages": {}
    },
    {
        "name": "Fusion-Forth",
        "description": "A Forth interpreter/compiler and IDE for Atari ST",
        "languages": {
            "Assembly": 155142,
            "Forth": 138468
        }
    },
    {
        "name": "bdc_disasm",
        "description": "Beyond Dark Castle (1987, Mac) game disassembly, in Motorola 68000 assembly language.",
        "languages": {
            "Assembly": 1832293,
            "Vim Script": 47577,
            "C": 9046
        }
    },
    {
        "name": "68k-mega-drive",
        "description": "Developing for the Sega Mega Drive using 68k assembly",
        "languages": {
            "Assembly": 15122
        }
    },
    {
        "name": "motorola-68k-assembly",
        "description": "A Language Extension for VS Code that adds syntax highlighting for the Motorola 68k and its variants. Supports multiple assemblers.",
        "languages": {}
    },
    {
        "name": "Flappy-Bird-68K",
        "description": "An implementation of the famous Flappy Bird game in 68K assembly language",
        "languages": {
            "Assembly": 62797
        }
    },
    {
        "name": "68K_Disassembler",
        "description": "Disassembler for the Motorola 68K. Takes a compiled, binary file and produces assembly code that represents it.",
        "languages": {}
    },
    {
        "name": "speedrun-tower",
        "description": "A Sega Genesis demo designed specifically for speedrunning, written in 68000 assembly.",
        "languages": {
            "Assembly": 1741837,
            "Shell": 866
        }
    },
    {
        "name": "mspacman500",
        "description": "Remake of MsPacman in 68k assembly",
        "languages": {
            "Assembly": 296834,
            "Python": 14555,
            "Makefile": 599,
            "Batchfile": 43
        }
    },
    {
        "name": "AoC2022",
        "description": "Advent of Code 2022 in 68k assembly",
        "languages": {
            "Assembly": 34332
        }
    },
    {
        "name": "CSS-422-Decompiler",
        "description": "Decompiler for 68k Assembly language written in the easy68k compiler",
        "languages": {}
    },
    {
        "name": "68k-instruction-index",
        "description": "This project was created as a resource to help students who are planning to take UW course CSS 422 Hardware and Computer Organization to have a easier time to learn assembly instructions",
        "languages": {
            "JavaScript": 7872,
            "HTML": 1872,
            "CSS": 932
        }
    },
    {
        "name": "language-m68k",
        "description": "Syntax highlighting for the Motorola 68k assembly language in Atom.",
        "languages": {}
    },
    {
        "name": "prison",
        "description": "Open source Breakout-style game for PalmOS devices, written in C with a little 68k assembly. First released in 2003.",
        "languages": {
            "C": 214394,
            "Makefile": 1561
        }
    },
    {
        "name": "emacs-m68k",
        "description": "Motorola 68k Assembly environment for Emacs. Focusing on Amiga in the beginning with lsp-server and debugger. Might extend to support other platforms based upon interest",
        "languages": {
            "Emacs Lisp": 4982
        }
    },
    {
        "name": "LIT-Yr2-MicroprocessorSystems",
        "description": "Yr2 Microprocessor Systems Labs, 68K Assembly Language",
        "languages": {}
    },
    {
        "name": "sporny-wrecking-ball",
        "description": "A little breakout style game for the Atari STE written in assembly 68k",
        "languages": {
            "Assembly": 446888,
            "Shell": 11815,
            "Makefile": 2650
        }
    },
    {
        "name": "assembly_language",
        "description": "Monitor Program using Motorola 68K",
        "languages": {}
    },
    {
        "name": "UK108",
        "description": "68008 assembly language code",
        "languages": {
            "Assembly": 3197,
            "Makefile": 363
        }
    },
    {
        "name": "Defender68",
        "description": "An 8-bit arcade game made in the Motorola 68000 assembly language.",
        "languages": {
            "Assembly": 81289
        }
    },
    {
        "name": "RetailClerk90",
        "description": "A work in-progress casual adventure game for the Sega Genesis written in 68000 assembly",
        "languages": {
            "Assembly": 2950045,
            "Shell": 539
        }
    },
    {
        "name": "Jump",
        "description": "Jump is a software development tool for Java on the PalmOS platform. It compiles Java classfiles to self-contained 68K assembly language programs for Pila.",
        "languages": {
            "Java": 1083776
        }
    },
    {
        "name": "Batman---Amiga",
        "description": "Batman The Movie, Amiga, 2 Disk Europe, Ocean",
        "languages": {
            "Assembly": 494189,
            "SWIG": 12968
        }
    },
    {
        "name": "Assembly",
        "description": "68k Assembly",
        "languages": {
            "Assembly": 20746
        }
    },
    {
        "name": "68k",
        "description": "assembly exercises",
        "languages": {
            "Roff": 1384
        }
    },
    {
        "name": "Marist_ASSEMBLY",
        "description": "My 68k Assembly projects",
        "languages": {}
    },
    {
        "name": "68k-snake",
        "description": "Snake in 68k Assembly!",
        "languages": {}
    },
    {
        "name": "68k-Assembly",
        "description": "Collection of various 68k programs",
        "languages": {}
    },
    {
        "name": "rune",
        "description": "DSL for PS4 68k assembly",
        "languages": {
            "Dart": 1005313
        }
    },
    {
        "name": "CS237",
        "description": "Motorola 68k Assembly Programming Examples",
        "languages": {
            "Assembly": 10431
        }
    },
    {
        "name": "motorola-68k-assembly-labs",
        "description": "Some assembler for the Motorola 68008 and PIA for a lab course.",
        "languages": {
            "Assembly": 1756
        }
    },
    {
        "name": "assembly-animation",
        "description": "Graphics animation in the Motorola 68K assembly language.",
        "languages": {}
    },
    {
        "name": "68kComment",
        "description": "Automates the indentation of comments in 68000 assembly.",
        "languages": {
            "Pascal": 3742,
            "Batchfile": 19
        }
    },
    {
        "name": "AssemblyGame",
        "description": "A game developed in Motorola 68K's assembly language as a university project.",
        "languages": {
            "Assembly": 143023
        }
    },
    {
        "name": "Interactive-Game-in-68k-Assembly",
        "description": "A game developed in Motorola 68000 Assembly Language for a project at FIEA (Fall 2015).",
        "languages": {}
    },
    {
        "name": "Assembly-Galaga",
        "description": "A simple galaga type clone created in 68k assembly language",
        "languages": {}
    },
    {
        "name": "68kdisassembler",
        "description": "This is the reverse assembler for the Motorola MC68000 Microprocessor created as a group project for CSS 422: Hardware and Computer Organization at University of Washington Bothell taught by Professor Yang Peng. Created by Mitchell Dang, Julia Brosseau, and Andrew Goupinets during the Summer 2020 quarter. ",
        "languages": {
            "Assembly": 176880
        }
    },
    {
        "name": "Game-Of-Life",
        "description": "Conways Game of Life In 68K Assembly",
        "languages": {
            "Assembly": 33046
        }
    },
    {
        "name": "68k-asm-project",
        "description": "An 68K assembly mega drive project I'm making for an assessment of mine.",
        "languages": {
            "Assembly": 83565
        }
    },
    {
        "name": "68kcounter-nvim",
        "description": "neovim plugin for 68kcounter",
        "languages": {
            "Lua": 5248,
            "Vim Script": 726
        }
    },
    {
        "name": "textengine",
        "description": "Amiga TextEngine wordprocessor written in 68k assembly language",
        "languages": {
            "Assembly": 321227
        }
    },
    {
        "name": "C-Assembly-Assignment",
        "description": "Programming I course assignment involving C and 68k Assembly programming (FIEA - Fall 2015)",
        "languages": {
            "C": 3891
        }
    },
    {
        "name": "Noughts-and-Crosses-68kAsm",
        "description": "Tic-Tac-Toe and Connect Four written in motorola 68000 assembly.",
        "languages": {
            "Assembly": 17370
        }
    },
    {
        "name": "CaesarCipher",
        "description": "Cifrador cesar desarrollado en el ensamblador del Motorola 68k | Caesar Cipher developed in the Motorola's 68k assembly.",
        "languages": {
            "Assembly": 2881
        }
    },
    {
        "name": "genshell",
        "description": "Skeleton code for building Sega Genesis/Mega Drive games in 68k assembly",
        "languages": {}
    },
    {
        "name": "twilightlegion",
        "description": "Twilight Legion for TI-89 (Titanium) calculators, written in C, 68k Assembly",
        "languages": {
            "C": 352563,
            "Objective-C": 30221
        }
    },
    {
        "name": "CSS-422-68k-Disassembler",
        "description": "The final project for my Hardware and Computer Organization class was to make a disassembler written in 68k  Assembly language.  I implemented Jump Tables to determine the first 4 bits and then jumped to the various subroutines from there. I also wrote about half of the subroutines. ",
        "languages": {
            "Assembly": 130210
        }
    },
    {
        "name": "SegaGenesis",
        "description": "A collection of experiments and maybe games written in 68k Assembly for the Sega Genesis",
        "languages": {
            "Assembly": 177018
        }
    },
    {
        "name": "Disassembler",
        "description": "This is a program that reads in machine code and disassembles it into 68k Assembly Language",
        "languages": {}
    },
    {
        "name": "mdgen",
        "description": "MDGEN is a Sega Mega Drive/Genesis Demo Cartgide Rom made by Glauco Furlaneto.",
        "languages": {
            "Assembly": 42866,
            "Batchfile": 107
        }
    },
    {
        "name": "68k-Disassembler",
        "description": "68k Disassembler - 68k assembly language",
        "languages": {}
    },
    {
        "name": "ADisassemblerBy3Dudes",
        "description": "A disassembler for 68K assembly, in 68K Assembly",
        "languages": {}
    },
    {
        "name": "easy68K",
        "description": "68K Assembly programs",
        "languages": {
            "Assembly": 82933
        }
    },
    {
        "name": "68k",
        "description": "Programs coded in assembly 68k for education purposes",
        "languages": {
            "Assembly": 5834
        }
    },
    {
        "name": "Assembly-Game",
        "description": "Created with 68k assembly.",
        "languages": {
            "Assembly": 75319
        }
    },
    {
        "name": "assembly",
        "description": "Contains assembly code related projects, including 68k virtual projects",
        "languages": {
            "Assembly": 17274
        }
    },
    {
        "name": "Assembly-68K",
        "description": "Assignments Completed at San Diego State University",
        "languages": {
            "Assembly": 14696
        }
    },
    {
        "name": "AssemblyCode68k",
        "description": "Some of my work in assembly 68k ",
        "languages": {
            "Assembly": 46911
        }
    },
    {
        "name": "68k-assembly",
        "description": "Programs and Subroutines for Motorola 68000 CPU using the Easy68k Assembler. Part of work for Micro-computer Design",
        "languages": {
            "Assembly": 7648
        }
    },
    {
        "name": "68KPrograms",
        "description": "Assembly Programs for 68k",
        "languages": {}
    },
    {
        "name": "Dino-Jump-II",
        "description": "68K assembly game - Easy68K",
        "languages": {
            "Assembly": 93698
        }
    },
    {
        "name": "68k-Assembly",
        "description": null,
        "languages": {
            "Assembly": 5115
        }
    },
    {
        "name": "the-disassemblers",
        "description": "68K Assembly Disassembler Project",
        "languages": {}
    },
    {
        "name": "Pachinko68K",
        "description": "Assembly 68K Pachinko Game",
        "languages": {}
    },
    {
        "name": "Pipfall-Assembly-68k",
        "description": "Port del minijuego Pipfall de Fallout 4 al procesador 68k",
        "languages": {
            "Assembly": 867051
        }
    },
    {
        "name": "68k-Assembly-Dissasembler",
        "description": null,
        "languages": {
            "Assembly": 54175
        }
    },
    {
        "name": "assemblyFootball",
        "description": "This is a football game I made in 68k assembly code.  Run the main.x68 file on the Easy 68k Emulator to play!",
        "languages": {}
    },
    {
        "name": "Assembly_PACMAN_68k",
        "description": null,
        "languages": {
            "Assembly": 78643
        }
    },
    {
        "name": "Selection-Sort-68k",
        "description": "Selection Sort using 68k assembly",
        "languages": {
            "Assembly": 2636
        }
    },
    {
        "name": "68Kgame",
        "description": "(Circa 2013) Space shooter programmed in assembly.",
        "languages": {}
    },
    {
        "name": "68kAssemblyGame",
        "description": "A small game made entirely in 68k assembly.",
        "languages": {
            "Assembly": 104774
        }
    },
    {
        "name": "68K_Battleship",
        "description": "Battleship game written in 68000 assembly",
        "languages": {
            "Assembly": 74580
        }
    },
    {
        "name": "68kc",
        "description": "68k compiler to generate bins from assembly",
        "languages": {}
    },
    {
        "name": "CSS422-Disassembler",
        "description": "Disassembler for 68K assembly language",
        "languages": {}
    },
    {
        "name": "Assembly-Game",
        "description": "Bullet hell game made in 68k assembly",
        "languages": {
            "Assembly": 31114
        }
    },
    {
        "name": "Disassembler",
        "description": "68K Assembly Language Disassembler Project",
        "languages": {}
    },
    {
        "name": "Decompiler",
        "description": "Decompiler for 68k assembly code",
        "languages": {
            "Assembly": 61559
        }
    },
    {
        "name": "AssemblyGame",
        "description": "A Motorola 68K assembly game complete with animations, collisions and AI",
        "languages": {}
    },
    {
        "name": "mars-invaders",
        "description": "Mars Invaders is an assembly coded game, more specifically for Motorola's 68000 family microprocessors. Final project of Computer's Structure II subject of Computer Science Bachelor's Degree of the University of the Balearic Islands (UIB).",
        "languages": {
            "Assembly": 133827
        }
    },
    {
        "name": "Bubble-Sort-68K",
        "description": "Bubble sort using Motorola 68000 assembly",
        "languages": {
            "Assembly": 2717
        }
    },
    {
        "name": "68K_Disassembler",
        "description": "Disassembler for opcodes in 68K assembly language",
        "languages": {
            "Assembly": 81450
        }
    },
    {
        "name": "Motorola-68K-Assembly-Disassembler",
        "description": "A program that reverts machine binary into assembly code",
        "languages": {
            "Assembly": 122704
        }
    },
    {
        "name": "68KMB-Programs",
        "description": "Assembly code which runs on the 68KMB",
        "languages": {}
    },
    {
        "name": "68k-disassembler",
        "description": "Simple disassembler for the 68k assembly language.",
        "languages": {
            "Assembly": 166068
        }
    },
    {
        "name": "TheShrillAndGruffAdventuresOfBlackAndYellow",
        "description": "Simple game written in 68k assembly",
        "languages": {}
    },
    {
        "name": "dis68k",
        "description": "A disassembler for Motorola 68k Assembly",
        "languages": {
            "Rust": 31425
        }
    },
    {
        "name": "Dissassembler",
        "description": "Disassembles S68 Machine Code 68K Assembly",
        "languages": {
            "Assembly": 45913
        }
    },
    {
        "name": "68K-Assembler",
        "description": "A compilation of projects written in Easy 68K Assembly",
        "languages": {
            "Assembly": 11456,
            "C++": 2338
        }
    },
    {
        "name": "SkyRoadsAssemblyClone",
        "description": "A clone of sky roads implemented in 68K Assembly",
        "languages": {}
    },
    {
        "name": "68k-experiments",
        "description": "A repository for my casual experiments with 68k assembly/classic Mac OS.",
        "languages": {
            "Shell": 556
        }
    },
    {
        "name": "Save-The-Eeeves-68k",
        "description": "Pong-Rhythm arcade game made in 68k assembly.",
        "languages": {
            "Assembly": 36870
        }
    },
    {
        "name": "x68-Assembly-Examples",
        "description": "Examples of code for the Motorola 68K Processor family.",
        "languages": {
            "Assembly": 8440
        }
    },
    {
        "name": "Simple-I-O-Assembly-68k-Program",
        "description": null,
        "languages": {
            "Assembly": 3615
        }
    },
    {
        "name": "68K-Disassembler",
        "description": "Designed a 68K Disassembler that translates 15 instructions from machine language into assembly language",
        "languages": {
            "Assembly": 88979
        }
    },
    {
        "name": "as",
        "description": "On-calc 68k assembler written in assembly",
        "languages": {
            "Assembly": 101471,
            "C": 83572,
            "Shell": 414
        }
    },
    {
        "name": "m68k-asm-vim",
        "description": "vim syntax file for Motorola 68k assembly",
        "languages": {
            "Vim Script": 6524
        }
    },
    {
        "name": "making-tea-68K",
        "description": "Text adventure written in 68K assembly language using the Easy68K assembler.",
        "languages": {}
    },
    {
        "name": "AssemblyGame",
        "description": "Mini demo of shoot 'em up system in motorola 68k assembly. Not a game (yet), but a checkpoint.",
        "languages": {
            "Assembly": 88058
        }
    },
    {
        "name": "68K-Disassembler",
        "description": "Motorola 68K Disassembler reads machine code and disassembles it into 68K Assembly Language, developed in EASy68K",
        "languages": {}
    },
    {
        "name": "Snake-moto68k",
        "description": "Game snake made in motorola 68k assembly language",
        "languages": {}
    },
    {
        "name": "Motorola_68K_Disassembler",
        "description": "68K Disassembler to decode machine code into readable Motorola 68000 microprocessor assembly code",
        "languages": {
            "Assembly": 7210
        }
    },
    {
        "name": "Hardware_Disassembler-",
        "description": "A project to disassemble a 68K assembly program ",
        "languages": {}
    },
    {
        "name": "misc-asm-68k-amiga-ocs",
        "description": "Miscellaneous Assembly programs on Motorola 68000 and Amiga's Original ChipSet",
        "languages": {
            "Assembly": 345311
        }
    },
    {
        "name": "Fake-Language-Compiler-Motorola-68K-COSC-40603",
        "description": "Compiles a Fictional Language to Motorola 68K Assembly",
        "languages": {
            "Java": 181555
        }
    },
    {
        "name": "M68K-Disassembler",
        "description": "A disassembler for the Motorola 68K CPU Assembly.",
        "languages": {
            "Assembly": 76297
        }
    },
    {
        "name": "68k-Rectangle-Animation",
        "description": null,
        "languages": {
            "Assembly": 4082
        }
    },
    {
        "name": "Motorolla-68K-examples",
        "description": "Examples are built using .X68 assembly to be run on EAsY 68K. Language probably is catalan",
        "languages": {
            "Assembly": 268828
        }
    },
    {
        "name": "68K_ASM",
        "description": "My memory efficient Motorola 68000 Assembler ",
        "languages": {
            "C": 25739,
            "Makefile": 328
        }
    },
    {
        "name": "M68k_Disassembler",
        "description": "Instruction code disassembler written for the Motorola 68k series in assembly",
        "languages": {}
    },
    {
        "name": "68kDisassembler",
        "description": "68k Disassembler converts binary into the 68k assembly instructions that were originally written. Complete with addressing modes, many opcodes, and user IO.",
        "languages": {
            "Assembly": 53887
        }
    },
    {
        "name": "Disassembler",
        "description": "Decodes Specific Instructions from the 68k Assembly Instruction set",
        "languages": {}
    },
    {
        "name": "68K-Disassembler",
        "description": "Program, written in 68K code, that decompiles binary code, generated from 68K assembly code, back into 68K code. Supports a limited set of 68K opcodes. Code can be run in Easy68K, a program that runs 68K assembly code. Instructions for how to use are a bit enigmatic.",
        "languages": {
            "Assembly": 124227
        }
    },
    {
        "name": "micropro-68k",
        "description": "Quelque exercie et quelque algo resolus",
        "languages": {
            "Assembly": 18282
        }
    },
    {
        "name": "6800-68K-Machine-Assembly-Language_University-of-Guelph_Projects",
        "description": null,
        "languages": {}
    },
    {
        "name": "ez68K-ASM",
        "description": "A collection of 68K assembly programs I wrote in college",
        "languages": {}
    },
    {
        "name": "Disassembler",
        "description": "Converts memory image of instructions and data into 68k Assembly",
        "languages": {}
    },
    {
        "name": "68K-Disassembler",
        "description": "An inverse assembler (disassembler) that converts a memory image of instructions and data back to the MC68000 assembly code and that will output the disassembled code to the display. ",
        "languages": {
            "Assembly": 41165
        }
    },
    {
        "name": "ChibiAkumas-68k-Tutorials-on-EASy68k",
        "description": "Tutorials from the website of ChibiAkumas. Assembly coding for Motorola 68k on EASy68k",
        "languages": {
            "Assembly": 22513
        }
    },
    {
        "name": "68k-asm",
        "description": "A collection of programs I wrote for the Easy68k Simulator",
        "languages": {
            "Assembly": 6123
        }
    },
    {
        "name": "Amiga_Game_Of_Life",
        "description": "Game Of Life written in Motorola 68k assembly, back in 1995",
        "languages": {
            "Assembly": 14741
        }
    },
    {
        "name": "Snake_Game_Assembly",
        "description": "my project is a snake game which can be played manually or in smart mode using Assembly in the 68K MP.",
        "languages": {
            "Assembly": 11444
        }
    },
    {
        "name": "as68k-scratch",
        "description": "Informal repository to work with assembly 68k, code comes and go",
        "languages": {
            "Shell": 2174
        }
    },
    {
        "name": "Lab-9-Assembly",
        "description": "The exact equation for the assignment was rather specific, so this is more a showcase of various elements of the 68k Assembly language.",
        "languages": {}
    },
    {
        "name": "Snake68K",
        "description": "A simple snake game programed for the Motorola 68k assembly using Easy68k",
        "languages": {}
    },
    {
        "name": "Tom-s-Big-Sandbox-Bash",
        "description": "A 68k assembly complete with physics, collision, haiku's, and Tom himself!",
        "languages": {
            "Assembly": 118645
        }
    },
    {
        "name": "Disassembler",
        "description": "Created a Disassembler using the 68k Assembly language. Read more in the README file. ",
        "languages": {
            "Assembly": 334133
        }
    },
    {
        "name": "genesis-pong",
        "description": "Old and unfinished Pong clone for the Sega Genesis, written in Motorola 68k assembly",
        "languages": {
            "Assembly": 46742,
            "Makefile": 350,
            "Roff": 128
        }
    },
    {
        "name": "Sega-Genesis-Hello",
        "description": "First Sega Genesis program written in 68k Assembly. Writes \"HELLO, USA\" to the screen.",
        "languages": {
            "Assembly": 24926
        }
    },
    {
        "name": "Amiga_LadiesProblem",
        "description": "Ladies Problem, written in Motorola 68k assembly on an Amiga 1200, back in 1994",
        "languages": {
            "Assembly": 2180
        }
    },
    {
        "name": "BattleIsleEditor",
        "description": "Map editors for Battle Isle, History Line and expansions. Platform: Amiga (Motorola 68k assembly)",
        "languages": {
            "Assembly": 607136
        }
    },
    {
        "name": "mazehike",
        "description": "Raycasting demo for a 2003 PalmOS coding contest, written in C and 68k assembly.",
        "languages": {
            "C": 34780,
            "Makefile": 1750
        }
    },
    {
        "name": "AdventOfCode2018Amiga-1",
        "description": "Challenge #1 of the Advent of Code 2018 challenge written in Amiga 68k assembly code",
        "languages": {
            "Assembly": 2465
        }
    },
    {
        "name": "Avalon",
        "description": "A small text based RPG made in Assembly 68k, based on \"Avalon: The Legend Lives\".",
        "languages": {}
    },
    {
        "name": "interlopers",
        "description": "Space Invaders clone for PalmOS, written in C and 68k assembly. First released in 2004.",
        "languages": {
            "C": 198249,
            "Makefile": 2741
        }
    },
    {
        "name": "DownRoll",
        "description": "A fully fledged arcade game coded in C and 68k Assembly language for the Atari ST. ",
        "languages": {
            "C": 153285,
            "SWIG": 13703,
            "Assembly": 1688
        }
    },
    {
        "name": "BounceOff",
        "description": "A real-time head-to-head multiplayer game written in 68K assembly for the EASy68K emulator.",
        "languages": {
            "Assembly": 53882
        }
    },
    {
        "name": "Sega-Genesis-Font-Example",
        "description": "An example of importing and using an actual font for the Sega Genesis, written in 68k Assembly.",
        "languages": {
            "Assembly": 34151
        }
    },
    {
        "name": "my-ASM-68k-68HC11-TI-code",
        "description": "I'll share here my few & modest assembly language program files, mainly done with devpack on ATARI ST & Falcon many years ago. Most of them lost in a crash disk abour 32 years ago. This programs will deal with demo effects, optimisation, embedded electronic / computer-science. Platforms : ATARI - MOTOROLA microControllers 68HC11 - TI",
        "languages": {}
    },
    {
        "name": "422-Disassembler",
        "description": "This program disassembles certain opcodes of the 68k processor's assembly, based on requirements given by the professor.",
        "languages": {
            "Assembly": 74354
        }
    },
    {
        "name": "Pattern-Finding",
        "description": "A program in 68k assembly language that accepts a one-byte value from the user and stores it.",
        "languages": {
            "Assembly": 5110
        }
    },
    {
        "name": "ECE441monitor",
        "description": "Monitor software design project for ECE441 (Microprocessors). Serves as shell for executing programs and debugging memory. 68k Assembly Language",
        "languages": {}
    },
    {
        "name": "emulator",
        "description": "El emulador de la m\u00e1quina USC-1 necesita para su correcto funcionamiento la implementaci\u00f3n de tres fases: la fase de fetch, la fase de decodificaci\u00f3n y la fase de ejecuci\u00f3n. En la fase de fetch lo que tiene que hacer el emulador es ocuparse de cargar la siguiente instrucci\u00f3n a ejecutar, indicada por el contador de programa, en el registro de instrucci\u00f3n y dejar listo el EPC para que apunte a la siguiente instrucci\u00f3n. Lo que se hace en la fase de decodificaci\u00f3n es transcribir la instrucci\u00f3n que se va a ejecutar para averiguar de qu\u00e9 tipo es y qu\u00e9 es lo que se tiene que hacer para que se lleve a cabo. En la fase de ejecuci\u00f3n el emulador realiza los procesos necesarios para imitar el comportamiento que tendr\u00eda que tener la m\u00e1quina original (USC-1). ",
        "languages": {
            "Assembly": 12784
        }
    },
    {
        "name": "vscode_amiga_asm_ks13_cfg",
        "description": "A collection of files to configure VSCode Amiga Assembly to look like KS 1.3",
        "languages": {
            "CSS": 625
        }
    },
    {
        "name": "Motorola68K_Disassembler",
        "description": "Machine language project written in Motorola 68K assembly language, used on the EASy68K simulator. Reads memory from user specified location and disassembles (translates) machine code into assembly language.",
        "languages": {}
    },
    {
        "name": "Afro-Fighter",
        "description": "A retro-style video game inspired by Street Fighter for the Atari ST, developed from scratch in C and 68k Assembly ",
        "languages": {
            "C": 516025,
            "Assembly": 7809,
            "GAP": 25
        }
    },
    {
        "name": "as68k-macros-collection-atarist",
        "description": "A collection of assembly macro for so called \"Motorola 68k family\", specifically for the family of computers known as \"Atari ST\"",
        "languages": {
            "Assembly": 58188
        }
    },
    {
        "name": "SpaceVacuum",
        "description": "Game programmed in 68K Assembly using Easy68K. A side scrolling shmup with a goal of keeping asteroids out of a giant space vacuum!",
        "languages": {}
    },
    {
        "name": "Decoding-32-bit-Floating-Point-Number",
        "description": "A program in 68k assembly language to decode an IEEE 32-bit floating point number given as a decimal into sign bit, exponent bits, and mantissa bits.",
        "languages": {
            "Assembly": 3517
        }
    },
    {
        "name": "Disassembler",
        "description": "CSS 422 Hardware and Computer Organization :: Created a disassembler which converted a memory image of instructions and data back into human-readable 68K assembly language and output this disassembly back onto the display.",
        "languages": {}
    },
    {
        "name": "PS-ECI-machine-emulator",
        "description": "In this final practice, a program that emulates the execution of programs written for a given elementary machine has been implemented in 68K assembly language. These programs are written using the instruction set of the machine in question, and the emulator works for any program that respects that set.",
        "languages": {
            "Assembly": 15116
        }
    }
]